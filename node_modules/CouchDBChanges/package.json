{
  "name": "CouchDBChanges",
  "version": "0.0.3",
  "author": {
    "name": "Jan Lehnardt",
    "email": "jan@apache.org"
  },
  "description": "Write CouchDB Changes Handlers. Easy.",
  "keywords": [
    "couchdb",
    "changes"
  ],
  "homepage": "http://github.com/janl/couchdb-external-CouchDBChanges",
  "repository": {
    "type": "git",
    "url": "git://github.com/janl/couchdb-external-CouchDBChanges"
  },
  "engines": [
    "node"
  ],
  "main": "./CouchDBChanges.js",
  "dependencies": {
    "follow": "0.8.0"
  },
  "readme": "# Write CouchDB Changes Listeners. Easy.\n\n    var changes = require(\"CouchDBChanges\");\n    changes.follow(\"database\", function(change) {\n       // do whatever you want with the change.\n    }, { url: \"http://127.0.0.1:5984/database/\"});\n\nWow, easy!\n\nCouchDB, The Definitive Guide has\n[a chapter on the Changes feed](http://guide.couchdb.org/draft/notifications.html).\n\n\n## Wha?\n\nCouchDB has this amazing feature called the “Changes Feed”. Think of\n`git log` for your database. There’s all sorts of awesome you can do\nwith this. For example, have a database called `outbox` and connect\na CouchDB changes listener to it and whenever your application creates\na new document, say\n\n    {\n        \"from\": \"me@example.com\",\n        \"to\": \"you@example.com\",\n        \"subject\": \"Hey there!\",\n        \"body\": \"I think you get the idea\"\n    }\n\nthe changes listener then gets notified right when the document gets\ncreated, but asynchronously from your application and send the email\nthat is described. When the email is sent, it can write back a new field\n\n    \"status\": \"sent\"\n\nor, if anything went wrong:\n\n    \"status\": \"error\",\n    \"error_message\": \"that email address is bogus you twat!\"\n\nSo yeah, quick example, but there’s tons of things you can do with this.\nWe should collect nice examples, but for now you can check out\n<https://github.com/janl/couchdb-external-CreateUserDatabase>.\n\n## API\n\n`follow(database, change_cb, follow_options, changes_options)`\n\n * `database`: (string) name of the database\n * `change_cb`: (callable) function to call for each change\n * `follow_options`: (object) configurations for following {\n   * persistent_since: (bool) false whether or not to persist the latest\n     `seq_id` from the server. This allows us to avoid processing a\n     change more than once.\n }\n * `changes_options`:  (object) parameters for the [follow library](follow).\n\n\n## Next?\n\n* Make `persistent_since` storage configurable.\n\n\n## Thanks\n\nThis is just a very thin wrapper around Jason Smith’s / Iris Couch’s\nexcellent [`follow` library](follow).\n\nThanks Jason!\n\n[follow]: https://github.com/iriscouch/follow\n\n## License & Copyright\n\n(c) 2012 Jan Lehnardt <jan@apache.org>  \nLicensed under the Apache License 2.0.\n",
  "_id": "CouchDBChanges@0.0.3",
  "dist": {
    "shasum": "48c398b697e45efd83752f7d14877130e7710a66"
  },
  "_from": "CouchDBChanges@0.0.3"
}
